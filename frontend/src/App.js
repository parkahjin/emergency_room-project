// src/App.js
import React, { useState, useEffect } from 'react';
import './styles/App.css';
import { getHospitalsWithPredictions, addDistanceToHospitals, getAllHospitals } from './services/api';
import Header from './components/Header';
import MapSection from './components/MapSection';
import Sidebar from './components/Sidebar';
import Modal from './components/Modal';
import { getHospitalRoute } from './services/api';  // Ï∂îÍ∞Ä

function App() {
  // Î™®Îì† ÏÉÅÌÉú Í¥ÄÎ¶¨ (Îß® ÏúÑÏóê Î™®ÏïÑÎë†)
  const [searchTerm, setSearchTerm] = useState('');
  const [radius, setRadius] = useState('10');
  const [sortBy, setSortBy] = useState('distance');
  const [selectedHospital, setSelectedHospital] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedHour, setSelectedHour] = useState(new Date().getHours());
  const [hospitals, setHospitals] = useState([]);
  const [loading, setLoading] = useState(true);
  
  // ÏúÑÏπò Í¥ÄÎ†® ÏÉÅÌÉú (ÏñëÏ†ïÏù∏Î†•Í∞úÎ∞úÏÑºÌÑ∞ Í≥†Ï†ï)
  const [userLocation, setUserLocation] = useState({
    lat: 35.1697, // Î∂ÄÏÇ∞ ÏñëÏ†ïÏù∏Î†•Í∞úÎ∞úÏÑºÌÑ∞ (ÏñëÏ†ïÏó≠ Ïù∏Í∑º)
    lng: 129.0704
  });
  const [locationName, setLocationName] = useState('Î∂ÄÏÇ∞ÏßÑÍµ¨ ÏñëÏ†ïÎèô');

  // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú Ïã§Ìñâ
  useEffect(() => {
    console.log('useEffect Ïã§ÌñâÎê®');
    getCurrentLocation();
    fetchHospitalsData();
  }, []);

  // Í≥†Ï†ï ÏúÑÏπò ÏÇ¨Ïö© (Î∂ÄÏÇ∞ ÏñëÏ†ïÏù∏Î†•Í∞úÎ∞úÏÑºÌÑ∞)
  const getCurrentLocation = () => {
    const fixedLocation = {
      lat: 35.1697,  // Î∂ÄÏÇ∞ ÏñëÏ†ïÏù∏Î†•Í∞úÎ∞úÏÑºÌÑ∞ (ÏñëÏ†ïÏó≠ Ïù∏Í∑º)
      lng: 129.0704
    };
    setUserLocation(fixedLocation);
    // getAddressFromCoords(fixedLocation.lat, fixedLocation.lng); // Ï£ºÏÑù Ï≤òÎ¶¨: Ï¥àÍ∏∞ state Í∞í ÏÇ¨Ïö©
    console.log('üìç Í≥†Ï†ï ÏúÑÏπò ÏÇ¨Ïö©:', fixedLocation);
  };

  // Ï¢åÌëúÎ•º Ï£ºÏÜåÎ°ú Î≥ÄÌôò
  const getAddressFromCoords = (lat, lng) => {
  console.log(`Ï¢åÌëú: ÏúÑÎèÑ ${lat}, Í≤ΩÎèÑ ${lng}`);
  
  // Î∂ÄÏÇ∞ 16Í∞ú Íµ¨/Íµ∞ Ï†ÑÏ≤¥
  if (lat >= 35.05 && lat <= 35.35 && lng >= 128.85 && lng <= 129.30) {
    // Ìï¥Ïö¥ÎåÄÍµ¨
    if (lat >= 35.14 && lat <= 35.23 && lng >= 129.07 && lng <= 129.20) {
      setLocationName('Î∂ÄÏÇ∞Ïãú Ìï¥Ïö¥ÎåÄÍµ¨');
    }
    // ÏàòÏòÅÍµ¨
    else if (lat >= 35.13 && lat <= 35.17 && lng >= 129.06 && lng <= 129.13) {
      setLocationName('Î∂ÄÏÇ∞Ïãú ÏàòÏòÅÍµ¨');
    }
    // Î∂ÄÏÇ∞ÏßÑÍµ¨
    else if (lat >= 35.14 && lat <= 35.19 && lng >= 129.02 && lng <= 129.07) {
      setLocationName('Î∂ÄÏÇ∞Ïãú Î∂ÄÏÇ∞ÏßÑÍµ¨');
    }
    // ÎèôÎûòÍµ¨
    else if (lat >= 35.19 && lat <= 35.23 && lng >= 129.05 && lng <= 129.10) {
      setLocationName('Î∂ÄÏÇ∞Ïãú ÎèôÎûòÍµ¨');
    }
    // ÎÇ®Íµ¨
    else if (lat >= 35.10 && lat <= 35.15 && lng >= 129.02 && lng <= 129.10) {
      setLocationName('Î∂ÄÏÇ∞Ïãú ÎÇ®Íµ¨');
    }
    // Ïó∞Ï†úÍµ¨
    else if (lat >= 35.17 && lat <= 35.21 && lng >= 129.03 && lng <= 129.09) {
      setLocationName('Î∂ÄÏÇ∞Ïãú Ïó∞Ï†úÍµ¨');
    }
    // Í∏àÏ†ïÍµ¨
    else if (lat >= 35.21 && lat <= 35.28 && lng >= 129.02 && lng <= 129.10) {
      setLocationName('Î∂ÄÏÇ∞Ïãú Í∏àÏ†ïÍµ¨');
    }
    // Í∏∞Ïû•Íµ∞
    else if (lat >= 35.18 && lat <= 35.35 && lng >= 129.10 && lng <= 129.30) {
      setLocationName('Î∂ÄÏÇ∞Ïãú Í∏∞Ïû•Íµ∞');
    }
    // ÏÑúÍµ¨
    else if (lat >= 35.08 && lat <= 35.11 && lng >= 128.96 && lng <= 129.00) {
      setLocationName('Î∂ÄÏÇ∞Ïãú ÏÑúÍµ¨');
    }
    // Ï§ëÍµ¨
    else if (lat >= 35.09 && lat <= 35.11 && lng >= 129.02 && lng <= 129.04) {
      setLocationName('Î∂ÄÏÇ∞Ïãú Ï§ëÍµ¨');
    }
    // ÎèôÍµ¨
    else if (lat >= 35.11 && lat <= 35.14 && lng >= 129.03 && lng <= 129.06) {
      setLocationName('Î∂ÄÏÇ∞Ïãú ÎèôÍµ¨');
    }
    // ÏòÅÎèÑÍµ¨
    else if (lat >= 35.06 && lat <= 35.09 && lng >= 128.99 && lng <= 129.08) {
      setLocationName('Î∂ÄÏÇ∞Ïãú ÏòÅÎèÑÍµ¨');
    }
    // ÏÇ¨ÌïòÍµ¨
    else if (lat >= 35.05 && lat <= 35.11 && lng >= 128.93 && lng <= 129.00) {
      setLocationName('Î∂ÄÏÇ∞Ïãú ÏÇ¨ÌïòÍµ¨');
    }
    // ÏÇ¨ÏÉÅÍµ¨
    else if (lat >= 35.13 && lat <= 35.18 && lng >= 128.95 && lng <= 129.01) {
      setLocationName('Î∂ÄÏÇ∞Ïãú ÏÇ¨ÏÉÅÍµ¨');
    }
    // Î∂ÅÍµ¨
    else if (lat >= 35.19 && lat <= 35.28 && lng >= 128.94 && lng <= 129.03) {
      setLocationName('Î∂ÄÏÇ∞Ïãú Î∂ÅÍµ¨');
    }
    // Í∞ïÏÑúÍµ¨
    else if (lat >= 35.05 && lat <= 35.21 && lng >= 128.85 && lng <= 128.98) {
      setLocationName('Î∂ÄÏÇ∞Ïãú Í∞ïÏÑúÍµ¨');
    }
    else {
      setLocationName('Î∂ÄÏÇ∞Í¥ëÏó≠Ïãú');
    }
  } else {
    setLocationName('Î∂ÄÏÇ∞ Ïô∏ ÏßÄÏó≠');
  }
};

const fetchHospitalsData = async () => {
  try {
    setLoading(true);
    console.log('üè• Î≥ëÏõê Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ï§ë...');
    
    const response = await getHospitalsWithPredictions();
    let hospitalData = response.data;
    
    console.log('‚úÖ Î≥ëÏõê Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å:', hospitalData.length + 'Í∞ú');
    
    // Í±∞Î¶¨ Ï†ïÎ≥¥ Ï∂îÍ∞Ä - userLocation ÏÇ¨Ïö©
    hospitalData = addDistanceToHospitals(
      hospitalData, 
      userLocation.lat, 
      userLocation.lng
    );
    
    // Îç∞Ïù¥ÌÑ∞ Ìè¨Îß∑ÌåÖ
    const formattedHospitals = hospitalData.map(hospital => {
      let congestionColor = 'gray';
      
      if (hospital.prediction && hospital.prediction.congestionLevel) {
        const level = hospital.prediction.congestionLevel;
        if (level === 'Ïó¨Ïú†') {
          congestionColor = 'green';
        } else if (level === 'Î≥¥ÌÜµ') {
          congestionColor = 'yellow';
        } else if (level === 'ÌòºÏû°') {
          congestionColor = 'red';
        }
      }
      
      return {
        ...hospital,
        congestion: congestionColor,
        status: hospital.prediction?.congestionLevel || 'Ï†ïÎ≥¥ÏóÜÏùå',
        waitTime: hospital.prediction?.predictedWaitTime 
          ? `${hospital.prediction.predictedWaitTime}Î∂Ñ` 
          : 'Ï†ïÎ≥¥ÏóÜÏùå',
        beds: hospital.bedsTotal || 0,
        distance: hospital.distanceText,
        driveTime: hospital.driveTime
      };
    });
    
    // ÏßÅÏÑ†Í±∞Î¶¨ Í∏∞Ï§ÄÏúºÎ°ú Ï†ïÎ†¨
    formattedHospitals.sort((a, b) => {
      const getNum = (str) => {
        const match = str.match(/[\d.]+/);
        return match ? parseFloat(match[0]) : 999;
      };
      return getNum(a.distance) - getNum(b.distance);
    });
    
    // ÏÉÅÏúÑ 10Í∞ú Î≥ëÏõêÎßå Ïπ¥Ïπ¥Ïò§ APIÎ°ú Ïã§Ï†ú Í±∞Î¶¨ ÏóÖÎç∞Ïù¥Ìä∏ (Î≥ëÎ†¨ Ìò∏Ï∂ú)
    console.log('üöó ÏÉÅÏúÑ 10Í∞ú Î≥ëÏõê Ïπ¥Ïπ¥Ïò§ Í±∞Î¶¨ ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë (Î≥ëÎ†¨ Ìò∏Ï∂ú)...');
    const top10Hospitals = formattedHospitals.slice(0, 10);

    const top10Updated = await Promise.all(
      top10Hospitals.map(async (hospital) => {
        try {
          const routeResult = await getHospitalRoute(hospital.id, userLocation);
          if (routeResult?.status === 'success' && routeResult?.data) {
            console.log(`  ‚úÖ ${hospital.name}: ${routeResult.data.distanceKm}km, ${routeResult.data.durationMin}Î∂Ñ`);
            return {
              ...hospital,
              distance: `${routeResult.data.distanceKm}km`,
              driveTime: `${routeResult.data.durationMin}Î∂Ñ`
            };
          } else {
            console.log(`  ‚ö†Ô∏è ${hospital.name}: API ÏùëÎãµ ÏóÜÏùå, ÏßÅÏÑ†Í±∞Î¶¨ ÏÇ¨Ïö©`);
            return hospital;
          }
        } catch (error) {
          console.error(`  ‚ùå ${hospital.name} Í≤ΩÎ°ú Ï°∞Ìöå Ïã§Ìå®:`, error.message);
          return hospital;
        }
      })
    )
    
    // ÏóÖÎç∞Ïù¥Ìä∏Îêú ÏÉÅÏúÑ 10Í∞ú + ÎÇòÎ®∏ÏßÄ Î≥ëÏõêÎì§ Ìï©ÏπòÍ∏∞
    const finalHospitals = [
      ...top10Updated,
      ...formattedHospitals.slice(10)
    ];
    
    setHospitals(finalHospitals);
    console.log('‚úÖ Îç∞Ïù¥ÌÑ∞ Ï§ÄÎπÑ ÏôÑÎ£å');

    const colorCount = finalHospitals.reduce((acc, h) => {
      acc[h.congestion] = (acc[h.congestion] || 0) + 1;
      return acc;
    }, {});
    console.log('ÌòºÏû°ÎèÑ ÏÉâÏÉÅ Î∂ÑÌè¨:', colorCount);
    console.log('ÌïÑÌÑ∞ÎßÅ Ï†Ñ Î≥ëÏõê Ïàò:', finalHospitals.length);
    
  } catch (err) {
    console.error('‚ùå Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', err);
  } finally {
    setLoading(false);
  }
};

  // ÏãúÍ∞Ñ Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨
  const handleTimeChange = async (hour) => {
    console.log(`ÏãúÍ∞Ñ Î≥ÄÍ≤Ω: ${hour}Ïãú`);
    setSelectedHour(hour);
    
    try {
      setLoading(true);
      
      const response = await fetch(`/api/predictions/hour/${hour}/all`);
      const predictionsData = await response.json();
      
      if (predictionsData.status === 'success') {
        const hospitalsResponse = await getAllHospitals();
        const hospitals = hospitalsResponse.data;
        const predictions = predictionsData.data;
        
        let hospitalData = hospitals.map(hospital => {
          const prediction = predictions.find(p => p.hospitalId === hospital.id);
          return {
            ...hospital,
            prediction: prediction || null
          };
        });
        
        // userLocation ÏÇ¨Ïö©
        hospitalData = addDistanceToHospitals(
          hospitalData,
          userLocation.lat,
          userLocation.lng
        );
        
        const formattedHospitals = hospitalData.map(hospital => {
          let congestionColor = 'gray';
          
          if (hospital.prediction && hospital.prediction.congestionLevel) {
            const level = hospital.prediction.congestionLevel;
            if (level === 'Ïó¨Ïú†') {
              congestionColor = 'green';
            } else if (level === 'Î≥¥ÌÜµ') {
              congestionColor = 'yellow';
            } else if (level === 'ÌòºÏû°') {
              congestionColor = 'red';
            }
          }
          
          return {
            ...hospital,
            congestion: congestionColor,
            status: hospital.prediction?.congestionLevel || 'Ï†ïÎ≥¥ÏóÜÏùå',
            waitTime: hospital.prediction?.predictedWaitTime 
              ? `${hospital.prediction.predictedWaitTime}Î∂Ñ` 
              : 'Ï†ïÎ≥¥ÏóÜÏùå',
            beds: hospital.bedsTotal || 0,
            distance: hospital.distanceText,
            driveTime: hospital.driveTime
          };
        });
        
        setHospitals(formattedHospitals);
        console.log(`${hour}Ïãú Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å`);
      }
    } catch (error) {
      console.error('ÏãúÍ∞ÑÎ≥Ñ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
    } finally {
      setLoading(false);
    }
  };
  
  // Í≤ÄÏÉâ Í∏∞Îä•
  const handleSearch = async (term) => {
    setSearchTerm(term);
    console.log('Í≤ÄÏÉâÏñ¥:', term);
    
    if (!term || term.trim() === '') {
      if (selectedHour !== new Date().getHours()) {
        handleTimeChange(selectedHour);
      } else {
        fetchHospitalsData();
      }
      return;
    }
    
    try {
      setLoading(true);
      
      const response = await fetch(`/api/hospitals/search?keyword=${encodeURIComponent(term)}`);
      const searchData = await response.json();
      
      if (searchData.status === 'success') {
        let hospitalData = searchData.data;
        
        const predictionsResponse = await fetch(`/api/predictions/hour/${selectedHour}/all`);
        const predictionsData = await predictionsResponse.json();
        
        if (predictionsData.status === 'success') {
          const predictions = predictionsData.data;
          
          hospitalData = hospitalData.map(hospital => {
            const prediction = predictions.find(p => p.hospitalId === hospital.id);
            return {
              ...hospital,
              prediction: prediction || null
            };
          });
        }
        
        // userLocation ÏÇ¨Ïö©
        hospitalData = addDistanceToHospitals(
          hospitalData,
          userLocation.lat,
          userLocation.lng
        );
        
        const formattedHospitals = hospitalData.map(hospital => {
          let congestionColor = 'gray';
          
          if (hospital.prediction && hospital.prediction.congestionLevel) {
            const level = hospital.prediction.congestionLevel;
            if (level === 'Ïó¨Ïú†') {
              congestionColor = 'green';
            } else if (level === 'Î≥¥ÌÜµ') {
              congestionColor = 'yellow';
            } else if (level === 'ÌòºÏû°') {
              congestionColor = 'red';
            }
          }
          
          return {
            ...hospital,
            congestion: congestionColor,
            status: hospital.prediction?.congestionLevel || 'Ï†ïÎ≥¥ÏóÜÏùå',
            waitTime: hospital.prediction?.predictedWaitTime 
              ? `${hospital.prediction.predictedWaitTime}Î∂Ñ` 
              : 'Ï†ïÎ≥¥ÏóÜÏùå',
            beds: hospital.bedsTotal || 0,
            distance: hospital.distanceText,
            driveTime: hospital.driveTime
          };
        });
        
        setHospitals(formattedHospitals);
        console.log(`Í≤ÄÏÉâ Í≤∞Í≥º: ${formattedHospitals.length}Í∞ú Î≥ëÏõê`);
        
        if (formattedHospitals.length === 0) {
          alert('Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.');
        }
      }
    } catch (error) {
      console.error('Í≤ÄÏÉâ Ïã§Ìå®:', error);
      alert('Í≤ÄÏÉâ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setLoading(false);
    }
  };

  // Î∞òÍ≤Ω ÌïÑÌÑ∞ÎßÅ Ìï®Ïàò
  const filterHospitalsByRadius = (hospitals, radiusKm) => {
    return hospitals.filter(hospital => {
      const distance = parseFloat(hospital.distance?.replace('km', '') || 0);
      return distance <= parseFloat(radiusKm);
    });
  };
  
  // Î∞òÍ≤Ω Î≥ÄÍ≤Ω
  const handleRadiusChange = (newRadius) => {
    setRadius(newRadius);
    console.log('Í≤ÄÏÉâ Î∞òÍ≤Ω:', newRadius + 'km');
  };
  
  // Ï†ïÎ†¨ Í∏∞Ï§Ä Î≥ÄÍ≤Ω
  const handleSortChange = (sortType) => {
    console.log('App.js - Ï†ïÎ†¨ Î≥ÄÍ≤Ω:', sortType);
    setSortBy(sortType);
  };
  
  // Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®
  const handleRefresh = () => {
    console.log('üîÑ Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®');
    if (selectedHour !== new Date().getHours()) {
      handleTimeChange(selectedHour);
    } else {
      fetchHospitalsData();
    }
  };
  
  // Î≥ëÏõê ÏÉÅÏÑ∏ Ï†ïÎ≥¥ ÌëúÏãú
  const handleShowDetail = (hospitalId) => {
    const hospital = hospitals.find(h => h.id === hospitalId);
    if (hospital) {
      setSelectedHospital(hospital);
      setIsModalOpen(true);
    }
  };
  
  // Î™®Îã¨ Îã´Í∏∞
  const handleCloseModal = () => {
    setIsModalOpen(false);
    setSelectedHospital(null);
  };
  
  // Ï†ÑÌôî Í±∏Í∏∞
  const handleMakeCall = (phoneNumber) => {
    console.log('Ï†ÑÌôî Í±∏Í∏∞:', phoneNumber);
    window.location.href = `tel:${phoneNumber}`;
  };
  
  // Í∏∏Ï∞æÍ∏∞
  const handleOpenDirections = (hospital) => {
    console.log('Í∏∏Ï∞æÍ∏∞:', hospital.name);
    const kakaoMapUrl = `https://map.kakao.com/link/to/${hospital.name},${hospital.latitude},${hospital.longitude}`;
    window.open(kakaoMapUrl, '_blank');
  };


  // Î≥ëÏõê Í±∞Î¶¨ Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò
  const updateHospitalDistance = (hospitalId, distanceInfo) => {
  setHospitals(prevHospitals => 
    prevHospitals.map(h => 
      h.id === hospitalId 
        ? { ...h, distance: distanceInfo.distance, driveTime: distanceInfo.driveTime }
        : h
    )
  );
};

  // Î°úÎî© Ï§ë
  if (loading) {
    return (
      <div className="container">
        <Header 
          searchTerm={searchTerm}
          onSearch={handleSearch}
          onRefresh={handleRefresh}
          onTimeChange={handleTimeChange}
          selectedHour={selectedHour}
          locationName={locationName}
        />
        <div style={{ 
          display: 'flex', 
          justifyContent: 'center', 
          alignItems: 'center', 
          height: '70vh',
          fontSize: '24px'
        }}>
          üè• Î≥ëÏõê Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ï§ë...
        </div>
      </div>
    );
  }

  // Î∞òÍ≤Ω ÌïÑÌÑ∞ÎßÅ Ï†ÅÏö©
  const filteredHospitals = filterHospitalsByRadius(hospitals, radius);

  return (
    <div className="container">
      <Header 
        searchTerm={searchTerm}
        onSearch={handleSearch}
        onRefresh={handleRefresh}
        onTimeChange={handleTimeChange}
        selectedHour={selectedHour}
        locationName={locationName}
      />
      
      <div className="main-content">
        <MapSection 
          hospitals={hospitals}
          radius={radius}
          onRadiusChange={handleRadiusChange}
          onMarkerClick={handleShowDetail}
          userLocation={userLocation} 
        />
        
        <Sidebar 
          hospitals={hospitals}
          sortBy={sortBy}
          onSortChange={handleSortChange}
          onHospitalClick={handleShowDetail}
          onCallClick={handleMakeCall}
          userLocation={userLocation} // Ï∂îÍ∞Ä
          onDistanceUpdate={updateHospitalDistance}  // Ï∂îÍ∞Ä
        />
      </div>
      
      <Modal 
        hospital={selectedHospital}
        isOpen={isModalOpen}
        onClose={handleCloseModal}
        onMakeCall={handleMakeCall}
        onOpenDirections={handleOpenDirections}
      />
    </div>
  );
}

export default App;